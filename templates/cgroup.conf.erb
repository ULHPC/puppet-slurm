# -*- mode: conf; -*-
#####################################################################################
# cgroup.conf -- Slurm's cgroup support configuration file for the '<%= scope['slurm::clustername'] %>'
#                cluster
#####################################################################################
# Documentation:
# - https://slurm.schedmd.com/cgroup.conf.html
# - For general Slurm Cgroups information, see the Cgroups Guide at
#       https://slurm.schedmd.com/cgroups.html
# - Comprehensive description of Linux Control Groups (cgroups):
#       https://www.kernel.org/doc/Documentation/cgroup-v1/cgroups.txt
#
# Organization of Slurm Cgroups:
# <CgroupMountpoint>/cpuset/slurm/uid_<uid>/job_<jobid>/step_0/tasks
#
# Detailed knowledge of cgroups is not required to use cgroups in Slurm, but a basic
# understanding of the following features of cgroups is helpful:
#
# - __Cgroup__: a container for a set of processes subject to common controls or
#   monitoring, implemented as a directory and a set of files (state objects) in the
#   cgroup virtual filesystem.
# - __Subsystem__ - a module, typically a resource controller, that applies a set of
#   parameters to the cgroups in a hierarchy.
# - __Hierarchy__ - a set of cgroups organized in a tree structure, with one or more
#   associated subsystems.
# - __State Objects__ - pseudofiles that represent the state of a cgroup or apply
#   controls to a cgroup:
#     * tasks - identifies the processes (PIDs) in the cgroup.
#     * additional state objects specific to each subsystem.
###################################################################################
# /!\ DO NOT EDIT THIS FILE: It has been automatically generated by Puppet.
#  In particular, any further changes will be overwritten at the next puppet
#  invocation
###################################################################################
#

<% if scope['slurm::version'] <= '23.02.6' -%>
CgroupAutomount=<%= scope['slurm::cgroup_automount'] ? 'yes' : 'no' %>
<% end -%>
CgroupMountpoint=<%= scope['slurm::cgroup_mountpoint'] %>

### Task/cgroup Plugin ###
<% if scope['slurm::version'] <= '23.02.6' -%>
<% unless scope['slurm::cgroup_allowedkmemspace'].nil? -%>
# Constrain the job cgroup kernel memory to this amount of the allocated memory, specified in bytes
AllowedKmemSpace=<%= scope['slurm::cgroup_allowedkmemspace'] %>

<% end -%>
<% end -%>
<% if scope['slurm::cgroup_allowedramspace'] != 100 -%>
# Constrain the job cgroup RAM to this percentage of the allocated memory
AllowedRAMSpace=<%= scope['slurm::cgroup_allowedramspace'] %>

<% end -%>
<% if scope['slurm::cgroup_allowedswapspace'] != 0 -%>
# Constrain the job cgroup swap space to this percentage of the allocated memory
AllowedSwapSpace=<%= scope['slurm::cgroup_allowedswapspace'] %>

<% end -%>
<% if  scope['slurm::cgroup_constraincores'] -%>
# Constrain allowed cores to the subset of allocated resources.
# This functionality makes use of the cpuset subsystem
<% end -%>
ConstrainCores=<%= scope['slurm::cgroup_constraincores'] ? 'yes' : 'no' %>
<% if scope['slurm::cgroup_constraindevices'] or !scope['slurm::cgroup_alloweddevices'].empty? -%>

# Constrain the job's allowed devices based on GRES allocated resources
# See <%= scope['slurm::configdir'] %>/<%= scope['slurm::params::cgroup_alloweddevices_configfile'] %>
ConstrainDevices=yes
<% end -%>
<% if scope['slurm::version'] <= '23.02.6' -%>
ConstrainKmemSpace=<%= scope['slurm::cgroup_constrainkmemspace']  ? 'yes' : 'no' %>
<% end -%>
ConstrainRAMSpace=<%=  scope['slurm::cgroup_constrainramspace']  ? 'yes' : 'no' %>
ConstrainSwapSpace=<%= scope['slurm::cgroup_constrainswapspace'] ? 'yes' : 'no' %>
<% if scope['slurm::cgroup_maxrampercent'] != 100  -%>

# Upper bound in percent of total RAM on the RAM constraint for a job
MaxRAMPercent=<%= scope['slurm::cgroup_maxrampercent'] %>

<% end -%>
<% if scope['slurm::cgroup_maxswappercent'] != 100  -%>
# Upper bound (in percent of total RAM) on the amount of RAM+Swap that may be used for a job.
MaxSwapPercent=<%= scope['slurm::cgroup_maxswappercent'] %>

<% end -%>
<% if scope['slurm::version'] <= '23.02.6' && scope['slurm::cgroup_maxkmempercent'] != 100  -%>
# Upper bound in percent of total Kmem for a job
MaxKmemPercent=<%= scope['slurm::cgroup_maxkmempercent'] %>

<% end -%>
<% if scope['slurm::version'] <= '23.02.6' -%>
MinKmemSpace=<%= scope['slurm::cgroup_minkmemspace']  %>
<% end -%>
MinRAMSpace=<%=  scope['slurm::cgroup_minramspace']   %>
<% if scope['slurm::cgroup_taskaffinity'] -%>
# Set a default task affinity to bind each step task to a subset of the
# allocated cores using sched_setaffinity
# /!\ This feature requires the Portable Hardware Locality (hwloc) library
TaskAffinity=yes
<% end -%>
<% if scope['slurm::version'] >= '23.11.0' -%>
SignalChildrenProcesses=<%= scope['slurm::cgroup_signalchildrenprocesses'] ? 'yes' : 'no' %>
<% end -%>
