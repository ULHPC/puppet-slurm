#! /bin/bash
# Time-stamp: <Wed 2018-02-07 17:57 svarrette>
################################################################################
#     ____  _                      __      __ ____    ____        _ _     _
#    / ___|| |_   _ _ __ _ __ ___ | _|_/\_|_ |  _ \  | __ ) _   _(_) | __| |
#    \___ \| | | | | '__| '_ ` _ \| |\    /| | | | | |  _ \| | | | | |/ _` |
#     ___) | | |_| | |  | | | | | | |/_  _\| | |_| | | |_) | |_| | | | (_| |
#    |____/|_|\__,_|_|  |_| |_| |_| |  \/  | |____/  |____/ \__,_|_|_|\__,_|
#                                 |__|    |__|
#               Copyright (c) 2017-<%= %> UL HPC Team <hpc-sysadmins@uni.lu>
################################################################################
# Just build the Slurm packages in an appropriate place.

# SLURM_VERSION='<%= scope['slurm::version'] >'
# SLURM_CHECKSUM='<%= scope['slurm::src_checksum'] >'
SLURM_VERSION='17.11.3'
SLURM_CHECKSUM='30cb15ae222a142107919383387abbeb'

### Local variables
STARTDIR="$(pwd)"
SCRIPTFILENAME=$(basename $0)
SCRIPTDIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
VERBOSE=''
DEBUG=''

SETCOLOR_NORMAL=$(tput   sgr0)
SETCOLOR_TITLE=$(tput    setaf 6)   # Cyan
SETCOLOR_SUBTITLE=$(tput setaf 14)  #
SETCOLOR_RED=$(tput      setaf 1)
SETCOLOR_GREEN=$(tput    setaf 2)
SETCOLOR_BOLD=$(tput     setaf 15)
SETCOLOR_DEBUG=$(tput    setaf 3)   # Yellow

# Which SLURM daemons to build/install
WITH_SLURMCTLD=''       # Controller
WITH_SLURMDBD=''        # Database
WITH_SLURMD='--slurmd'  # (Default) Regular daemon for frontend/compute nodes

# Source Directory
SRC_DIR='/usr/local/src'

# RPMs Build directory
RPMs_BUILD_DIR='/root/rpmbuild/RPMS/x86_64'

# List of pre-requisite packages to install
PRE_REQUISITE_PACKAGES="epel-release vim screen htop wget mailx rng-tools rpm-build gcc gcc-c++ readline-devel openssl openssl-devel pam-devel numactl numactl-devel hwloc hwloc-devel lua lua-devel readline-devel rrdtool-devel ncurses-devel man2html libibmad libibumad perl-devel perl-CPAN hdf5-devel.x86_64 lz4-devel freeipmi-devel hwloc-devel hwloc-plugins rrdtool-devel"
SLURMDB_BACKEND_PACKAGES="mariadb-server mariadb-devel"
MUNGE_PACKAGES="munge munge-libs munge-devel"

# Where to download slurm
SLURM_ARCHIVE="slurm-${SLURM_VERSION}.tar.bz2"
#DOWNLOAD_URL="https://www.schedmd.com/downloads/latest/${SLURM_ARCHIVE}"
# DOWNLOAD_LATESTDIR='latest'
# DOWNLOAD_ARCHIVEDIR='archive'

DOWNLOAD_BASEURL='https://www.schedmd.com/downloads'

###############################################################################################
######
# Print information
##
info () {
    echo " "
    echo "${SETCOLOR_BOLD}${SETCOLOR_TITLE}$*${SETCOLOR_NORMAL}${SETCOLOR_NORMAL}"
}
error() {
    echo
    echo "${SETCOLOR_RED}*** ERROR *** $*${SETCOLOR_NORMAL}"
    exit 1
}
debug()   {
    [ -n "${DEBUG}" ] && echo "${SETCOLOR_NORMAL}${SETCOLOR_DEBUG} (Debug) ${SETCOLOR_NORMAL} $*"
}
print_usage() {
    cat <<EOF
    $0 [--debug] [--slurmctld] [--slurmdbd]
    $0 [--debug] [--slurmd]

Download and Build the SLURM Daemons packages version ${SLURM_VERSION}.
EOF
}
###
# Install the packages passed as argument
# Usage:
#    pkg_install pkg1 [pkg2] [...]
##
pkg_install() {
    case $PACKAGE_TOOL in
        apt) apt-get install -y $*;;
        yum) yum install -y $*;;
        *)   error "Distribution Not detected/suported"
    esac
}
###
# As above, but perform a local installation of the provided rpms / debs
# Usage:
#    local_install file1.{rpm|deb} [file2.{rpm|deb} ...]
##
local_install() {
    debug "Local installation for the packages $*"
    case $PACKAGE_TOOL in
        apt) dpkg -i -y $*;;
        yum) yum -y --nogpgcheck localinstall $*;;
        *)   error "Distribution Not detected/suported"
    esac
}
###
# Start and Enable a service passed as parameter
# Usage:
#    service_restart  <name>
##
service_restart() {
    local name=$1
    case $PACKAGE_TOOL in
        apt)
            /etc/init.d/${name} restart;
            /etc/init.d/${name} status;
            ;;
        yum)  systemctl enable ${name};
              systemctl restart ${name};
              systemctl status ${name};;
        *)   error "Distribution Not detected/suported"
    esac

}

####################### Slurm Download & Build #######################

###
# Download the sources
##
download_slurm(){
    download_url="${DOWNLOAD_BASEURL}/${SLURM_ARCHIVE}"
    download_archive="${SRC_DIR}/${SLURM_ARCHIVE}"

    if [ ! -d "${SRC_DIR}" ]; then
        info "creating source directory '${SRC_DIR}'"
        mkdir -p ${SRC_DIR}
    fi
    if [ ! -f "${download_archive}" ]; then
        curl -o ${SRC_DIR}/${SLURM_ARCHIVE} ${download_url}
    fi
}

###
# Build RPM Package for SLURM based on the archive passed as argument
# Usage:
#    rpmbuild_slurm '/path/to/slurm-<version>.tar.bz2'
##
rpmbuild_slurm() {
    local src_bz2=$1
    local rpms=$( ls ${RPMs_BUILD_DIR}/slurm-*${SLURM_VERSION}*.rpm            2>/dev/null | xargs echo)

    [ ! -f "${src_bz2}" ] && error "Unable to find the SLURM sources '${src_bz2}'"

    if [ -z "${rpm}" ]; then
        info "Generating SLURM RPMs from the source archive '${src_bz2}'"
        rpmbuild -ta --with lua ${src_bz2}
    fi
}

#######################  Per OS Bootstrapping function ##########################
setup_redhat() {
    info "Running yum update"
    yum update -y  >/dev/null

    info "Installing default packages"
    yum install -y epel-release
    yum groupinstall -y 'Development tools'
    yum install -y ${PRE_REQUISITE_PACKAGES} ${EXTRA_PACKAGES} >/dev/null

    if [ -n "${WITH_SLURMDBD}" ]; then
        info "installing SLURMDBD backend (Maria DB)"
        yum install -y ${SLURMDB_BACKEND_PACKAGES}
    fi

    if [ -n "${WITH_SLURMCTLD}" ]; then
        info "installing Munge packages"
        yum install -y ${MUNGE_PACKAGES}
    fi
    download_slurm


    # # Now final restart of all daemons
    # [ -n "${WITH_SLURMDBD}" ]  && service_restart slurmdbd  || true
    # [ -n "${WITH_SLURMCTLD}" ] && service_restart slurmctld || true
    # [ -n "${WITH_SLURMD}"    ] && service_restart slurmd    || true
}

setup_apt() {
    case $1 in
        3*) codename=cumulus ;;
        6)  codename=squeeze ;;
        7)  codename=wheezy ;;
        8)  codename=jessie  ;;
        9)  codename=stretch  ;;
        12.04) codename=precise ;;
        14.04) codename=trusty  ;;
        16.04) codename=xenial ;;
        *) echo "Release not supported" ;;
    esac
    error "TODO -- NOT YET IMPLEMENTED"
}


###
# Detect Linux distribution and invoke the appropriate setup_* function
##
setup_linux() {
    ARCH=$(uname -m | sed 's/x86_//;s/i[3-6]86/32/')
    if [ -f /etc/redhat-release ]; then
        OS=$(cat /etc/redhat-release | cut -d ' ' -f 1)
        majver=$(cat /etc/redhat-release | sed 's/[A-Za-z]*//g' | sed 's/ //g' | cut -d '.' -f 1)
    elif [ -f /etc/SuSE-release ]; then
        OS=sles
        majver=$(cat /etc/SuSE-release | grep VERSION | cut -d '=' -f 2 | tr -d '[:space:]')
    elif [ -f /etc/os-release ]; then
        . /etc/os-release
        OS=$ID
        majver=$VERSION_ID
    elif [ -f /etc/debian_version ]; then
        OS=Debian
        majver=$(cat /etc/debian_version | cut -d '.' -f 1)
    elif [ -f /etc/lsb-release ]; then
        . /etc/lsb-release
        OS=$DISTRIB_ID
        majver=$DISTRIB_RELEASE
    elif [ -f /etc/os-release ]; then
        . /etc/os-release
        OS=$ID
        majver=$VERSION_ID
    else
        OS=$(uname -s)
        majver=$(uname -r)
    fi
    distro=$(echo $OS | tr '[:upper:]' '[:lower:]')
    info "Detected Linux distro: ${distro} version ${majver} on arch ${ARCH}"
    case "$distro" in
        debian|ubuntu)
            PACKAGE_TOOL='apt-get';
            setup_apt $majver ;;
        redhat|fedora|centos|scientific|amazon)
            PACKAGE_TOOL='yum'
            setup_redhat $majver ;;
        *) echo "Not supported distro: $distro"; exit 1;;
    esac

}


######################################################################################
[ $UID -gt 0 ] && error "You must be root to execute this script (current uid: $UID)"

# Parse the command-line options
while [ $# -ge 1 ]; do
    case $1 in
        -h | --help)    print_usage;       exit 0;;
        -V | --version) print_version;     exit 0;;
        --debug)        DEBUG="--debug";;
        -c | --controller)        # Wrapper for both DB and controller
            WITH_SLURMD='';
            WITH_SLURMCTLD=$1;
            WITH_SLURMDBD=$1;;
        --slurmctld)
            WITH_SLURMD='';
            WITH_SLURMCTLD=$1
            ;;
        --slurmdbd)
            WITH_SLURMD='';
            WITH_SLURMDBD=$1;;
        --slurmd)
            WITH_SLURMCTLD='';
            WITH_SLURMDBD='';
            WITH_SLURMD=$1;;
    esac
    shift
done

# Let's go
case "$OSTYPE" in
    linux*)   setup_linux ;;
    *)        echo "unknown: $OSTYPE"; exit 1;;
esac
